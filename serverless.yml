service: bookstore

provider:
  name: aws
  runtime: nodejs20.x
  stage: dev
  region: us-east-1
  environment:
    DYNAMODB_TABLE_NAME: ${self:custom.bookStoreTableName}

custom:
  bookStoreTableName: bookStore-table-${self:provider.stage}
  serverless-dynamodb:
    port: 8000
    docker: false
    start:
      migrate: true

plugins:
  - serverless-iam-roles-per-function
  - serverless-dynamodb
  - serverless-offline

functions:
  getBook:
    handler: server/src/controllers/books.getBook
    name: get-book
    events: 
      - http:
          path: book/{bookId}
          method: GET
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:GetItem"
        Resource: !GetAtt BooksTable.Arn
  createBook:
    handler: server/src/controllers/books.createBook
    name: create-book
    events:
      - http:
          path: book
          method: POST
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:PutItem"
        Resource: !GetAtt BooksTable.Arn
  updateBook:
    handler: server/src/controllers/books.updateBook
    name: update-book
    events:
      - http:
          path: book/{bookId}
          method: PUT
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:UpdateItem"
        Resource: !GetAtt BooksTable.Arn
  deleteBook:
    handler: server/src/controllers/books.deleteBook
    name: delete-book
    events:
      - http:
          path: book/{bookId}
          method: DELETE
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:DeleteItem"
        Resource: !GetAtt BooksTable.Arn
  getAllBooks:
    handler: server/src/controllers/books.getAllBooks
    name: get-all-books
    events:
      - http:
          path: books
          method: GET
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:Scan"
        Resource: !GetAtt BooksTable.Arn
  getCustomer:
    handler: server/src/controllers/customers.getCustomer
    name: get-customer
    events: 
      - http:
          path: customer/{customerId}
          method: GET
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:GetItem"
        Resource: !GetAtt BooksTable.Arn
  

resources:
  Resources:
    BooksTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.bookStoreTableName}
        AttributeDefinitions:
          - AttributeName: bookId
            AttributeType: S
        KeySchema:
          - AttributeName: bookId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1